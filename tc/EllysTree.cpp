#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

using namespace std;

const int N = 123;

class EllysTree {
public:
    vector<int> g[N];
    int p[N];
    bool free[N], mark[N];
    int en[N], ex[N], depth[N];
    int T = 0;

    void dfs(int v, int d = 0) {
        en[v] = T++;
        depth[v] = d;
        for (int u : g[v]) {
            dfs(u, d + 1);
        }
        ex[v] = T++;
    }

    bool isAnc(int a, int b) {
        return en[a] <= en[b] && ex[b] <= ex[a];
    }

    bool can(int a, int b) {
        return isAnc(a, b) || isAnc(b, a);
    }

    int getdown(int v, int n) {
        int ret = -1;
        for (int i = 0; i <= n; i++) {
            if (mark[i] && isAnc(v, i)) {
                if (ret == -1 || depth[ret] < depth[i]) {
                    ret = i;
                }
            }
        }
        return ret;
    }

    int getup(int v) {
        while (true) {
            v = p[v];
            if (mark[v]) return v;
            if (v == p[v]) break;
        }
        return -1;
    }

    bool check(int todel, int n) {
        for (int i = 0; i <= n; i++) mark[i] = free[i];
        mark[todel] = false;
        while (true) {
            int dw = getdown(todel, n);
            if (dw == -1) {
                int up = getup(todel);
                if (up == -1) break;
                todel = up;
            } else {
                todel = dw;
            }
            mark[todel] = false;
        }
        bool ok = true;
        for (int i = 0; i <= n; i++) {
            ok &= !mark[i];
        }
        return ok;
    }

	vector<int> getMoves(vector<int> parent) {
        int n = (int)parent.size();
        p[0] = 0;
        for (int i = 0; i < n; i++) {
            g[parent[i]].push_back(i + 1);
            p[i + 1] = parent[i];
        }
        memset(free, true, sizeof free);

        dfs(0);

        free[0] = false;
        vector<int> ans;
        int v = 0;
        for (int i = 0; i < n; i++) {
            bool ok = false;
            for (int todel = 1; todel <= n; todel++) {
                if (free[todel] && can(v, todel)) {
                    if (check(todel, n)) {
                        free[todel] = false;
                        v = todel;
                        ans.push_back(todel);
                        ok = true;
                        break;
                    }
                }
            }
            if (!ok) {
                return vector<int>();
            }
        }
        return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, vector <int> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	EllysTree *obj;
	vector <int> answer;
	obj = new EllysTree();
	clock_t startTime = clock();
	answer = obj->getMoves(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p1[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	
	{
	// ----- test 0 -----
	int t0[] = {9,13,7,9,8,14,14,0,6,9,2,2,5,5,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,5,2,11,13,12,8,3,7,15,14,4,6,9,10};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {3,4,5,0,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3,4,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1.clear() /*{}*/;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {0,6,6,2,6,1,3,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,4,1,3,7,6,5,8};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
